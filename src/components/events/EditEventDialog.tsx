import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { eventsAPI } from '@/services/api';\nimport { toast } from 'sonner';\nimport { format, parseISO } from 'date-fns';\nimport { ImageIcon, Loader2 } from 'lucide-react';\n\ninterface EditEventDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  eventId: string;\n  onEventUpdated?: () => void;\n}\n\ninterface EventData {\n  id: number;\n  title: string;\n  description: string;\n  location: string;\n  start_time: string;\n  end_time: string;\n  event_type: string;\n  is_online: boolean;\n  meeting_link?: string;\n  image_data?: string;\n  image_base64?: string;\n}\n\nconst EditEventDialog: React.FC<EditEventDialogProps> = ({ \n  open, \n  onOpenChange,\n  eventId,\n  onEventUpdated\n}) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [location, setLocation] = useState('');\n  const [startDate, setStartDate] = useState<Date | undefined>(new Date());\n  const [startTime, setStartTime] = useState('09:00');\n  const [endDate, setEndDate] = useState<Date | undefined>(new Date());\n  const [endTime, setEndTime] = useState('10:00');\n  const [eventType, setEventType] = useState('lecture');\n  const [isOnline, setIsOnline] = useState(false);\n  const [meetingLink, setMeetingLink] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchEventData = async () => {\n      if (!eventId || !open) return;\n      \n      setIsLoading(true);\n      try {\n        const eventData = await eventsAPI.getEvent(eventId);\n        \n        // Set form data\n        setTitle(eventData.title);\n        setDescription(eventData.description || '');\n        setLocation(eventData.location || '');\n        setIsOnline(eventData.is_online);\n        setMeetingLink(eventData.meeting_link || '');\n        setEventType(eventData.event_type);\n        \n        // Parse dates and times\n        const startDateTime = parseISO(eventData.start_time);\n        setStartDate(startDateTime);\n        setStartTime(format(startDateTime, 'HH:mm'));\n        \n        const endDateTime = parseISO(eventData.end_time);\n        setEndDate(endDateTime);\n        setEndTime(format(endDateTime, 'HH:mm'));\n        \n        // Set image preview if available\n        if (eventData.image_base64) {\n          setImagePreview(`data:image/jpeg;base64,${eventData.image_base64}`);\n        } else if (eventData.image_data) {\n          setImagePreview(eventData.image_data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch event data:', error);\n        toast.error('Failed to load event data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchEventData();\n  }, [eventId, open]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!title || !startDate || !startTime || !endDate || !endTime) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n    \n    // Create start and end datetime strings\n    const startDateTime = new Date(startDate);\n    const [startHours, startMinutes] = startTime.split(':').map(Number);\n    startDateTime.setHours(startHours, startMinutes);\n    \n    const endDateTime = new Date(endDate);\n    const [endHours, endMinutes] = endTime.split(':').map(Number);\n    endDateTime.setHours(endHours, endMinutes);\n    \n    // Validate dates are valid\n    if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {\n      toast.error('Please enter valid dates in YYYY-MM-DD format');\n      return;\n    }\n    \n    // Validate that end time is after start time\n    if (endDateTime <= startDateTime) {\n      toast.error('End time must be after start time');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Process image if provided\n      let imageUpload;\n      if (imageFile) {\n        const reader = new FileReader();\n        imageUpload = await new Promise((resolve) => {\n          reader.onloadend = () => resolve(reader.result);\n          reader.readAsDataURL(imageFile);\n        });\n      }\n      \n      const eventData = {\n        title,\n        description,\n        location: isOnline ? '' : location,\n        start_time: startDateTime.toISOString(),\n        end_time: endDateTime.toISOString(),\n        event_type: eventType,\n        is_online: isOnline,\n        meeting_link: isOnline ? meetingLink : '',\n        image_upload: imageUpload || undefined\n      };\n      \n      await eventsAPI.updateEvent(eventId, eventData);\n      toast.success('Event updated successfully');\n      onOpenChange(false);\n      if (onEventUpdated) {\n        onEventUpdated();\n      }\n    } catch (error) {\n      console.error('Failed to update event:', error);\n      toast.error('Failed to update event');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Event</DialogTitle>\n        </DialogHeader>\n        \n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Event Title*</Label>\n              <Input\n                id=\"title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                placeholder=\"Enter event title\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder=\"Provide details about the event\"\n                rows={3}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"event-type\">Event Type*</Label>\n              <Select value={eventType} onValueChange={setEventType} required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select event type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"lecture\">Lecture</SelectItem>\n                  <SelectItem value=\"workshop\">Workshop</SelectItem>\n                  <SelectItem value=\"exam\">Exam</SelectItem>\n                  <SelectItem value=\"deadline\">Deadline</SelectItem>\n                  <SelectItem value=\"meeting\">Meeting</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"is-online\"\n                checked={isOnline}\n                onCheckedChange={setIsOnline}\n              />\n              <Label htmlFor=\"is-online\">This is an online event</Label>\n            </div>\n            \n            {isOnline ? (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"meeting-link\">Meeting Link</Label>\n                <Input\n                  id=\"meeting-link\"\n                  value={meetingLink}\n                  onChange={(e) => setMeetingLink(e.target.value)}\n                  placeholder=\"Enter meeting URL\"\n                  type=\"url\"\n                />\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location</Label>\n                <Input\n                  id=\"location\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  placeholder=\"Enter event location\"\n                />\n              </div>\n            )}\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date*</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={startDate ? format(startDate, \"yyyy-MM-dd\") : \"\"}\n                  onChange={(e) => {\n                    const dateValue = e.target.value;\n                    if (dateValue) {\n                      setStartDate(new Date(dateValue));\n                    } else {\n                      setStartDate(undefined);\n                    }\n                  }}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-time\">Start Time*</Label>\n                <Input\n                  id=\"start-time\"\n                  type=\"time\"\n                  value={startTime}\n                  onChange={(e) => setStartTime(e.target.value)}\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-date\">End Date*</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={endDate ? format(endDate, \"yyyy-MM-dd\") : \"\"}\n                  onChange={(e) => {\n                    const dateValue = e.target.value;\n                    if (dateValue) {\n                      setEndDate(new Date(dateValue));\n                    } else {\n                      setEndDate(undefined);\n                    }\n                  }}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-time\">End Time*</Label>\n                <Input\n                  id=\"end-time\"\n                  type=\"time\"\n                  value={endTime}\n                  onChange={(e) => setEndTime(e.target.value)}\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"event-image\">Event Cover Image</Label>\n              <Input\n                id=\"event-image\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => {\n                  const file = e.target.files?.[0];\n                  if (file) {\n                    setImageFile(file);\n                    // Create preview\n                    const reader = new FileReader();\n                    reader.onloadend = () => {\n                      setImagePreview(reader.result as string);\n                    };\n                    reader.readAsDataURL(file);\n                  }\n                }}\n              />\n              {imagePreview && (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm mb-1\">Preview:</p>\n                  <img \n                    src={imagePreview} \n                    alt=\"Event preview\" \n                    className=\"max-h-40 rounded-md object-cover\"\n                  />\n                </div>\n              )}\n            </div>\n            \n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting || isLoading}>\n                {isSubmitting ? 'Updating...' : 'Update Event'}\n              </Button>\n            </DialogFooter>\n          </form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default EditEventDialog;